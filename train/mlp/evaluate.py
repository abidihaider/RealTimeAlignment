"""
Train an detector calibration model on ROM data with IPOT
"""

import os
import argparse
from pathlib import Path
from tqdm import tqdm
import yaml

# == torch ======================================
import torch
from torch.utils.data import DataLoader

# == sparse poi =================================
from rtal.datasets.dataset import ROMDataset
from rtal.utils import Checkpointer, Cumulator, get_data_root
from rtal.models.mlp import MLP
from rtal.geometry.line import (reconstruct,
                                calc_least_square_residual)


os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'


def run_epoch(model,
              rounded_readout,
              loss_fn,
              dataloader, *,
              device):
    """
    run one epoch on a data loader
    """

    # whether to use binned or continous readout
    readout_type = 'rounded' if rounded_readout else 'cont'

    cumulator = Cumulator()

    pbar = tqdm(dataloader, total=len(dataloader), desc='evaluation')
    for event in pbar:

        # readout generated by the misaligned detectors
        readout = event[f'readout_curr_{readout_type}'].to(device)
        # Let us pretend for now that we know which three readouts are
        # generate from the same trajectory
        # readout: (batch_size, num_detectors, num_particles, 2)
        #        ->(batch_size, num_particles, num_detectors, 2)
        readout = torch.transpose(readout, 1, 2)

        # get the correct and misaligned detectors
        detector_curr = event['detector_curr'].to(device)
        detector_start = event['detector_start'].to(device)

        # run the model, calculate loss, and update network
        detector_pred = model.inference(readout.flatten(-2, -1), randperm=False)

        detector_pred = detector_pred.reshape(-1, 3, 9)

        diff = loss_fn(detector_pred, detector_curr)

        # reconstruct the points and calculate the least square residual
        residual = calc_least_square_residual(
            reconstruct(detector_pred, readout),
            particle_vertex    = event['particle_vertex'],
            particle_direction = event['particle_direction'],
            averaged           = True
        )

        # supervised loss
        loss = diff + 0 * residual

        # metrics: line residual and differences to the
        # starting and current(target) detector parameters.
        # get line residual
        residual_cc = calc_least_square_residual(
            reconstruct(detector_curr, readout),
            particle_vertex    = event['particle_vertex'],
            particle_direction = event['particle_direction'],
            averaged           = True
        )
        residual_sc = calc_least_square_residual(
            reconstruct(detector_start, readout),
            particle_vertex    = event['particle_vertex'],
            particle_direction = event['particle_direction'],
            averaged           = True
        )

        # get differences to the start and current (target) detector parameters.
        diff_to_start = loss_fn(detector_pred, detector_start)
        epsilon       = loss_fn(detector_curr, detector_start)

        # bookkeeping
        # TODO: from the predicted misalignment, calculate the predicted
        # global coordinates of the intersection, from which we can get the
        # reconstructed particle parameter (vertices and directions).
        cumulator.update({'loss'    : loss.item(),
                          'res_pc'  : residual.item(),
                          'diff_pc' : diff.item(),
                          # metrics:
                          'diff_ps' : diff_to_start.item(),
                          'res_cc'  : residual_cc.item(),
                          'res_sc'  : residual_sc.item(),
                          'epsilon' : epsilon.item()})

        summary = cumulator.get_average()
        pbar.set_postfix(summary)

    return summary

def get_parameters():
    """
    Get training configuration and training device
    """
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('--config',
                        type    = str,
                        default = 'config.yaml',
                        help    = 'path to config file | config.yaml')
    parser.add_argument('--device',
                        type    = str,
                        default = 'cuda',
                        choices = ('cuda', 'cpu'),
                        help    = 'device to train the model on | default = cuda')
    parser.add_argument('--gpu-id',
                        type    = int,
                        default = 0,
                        help    = 'GPU to train the model on | default = 0')
    parser.add_argument('--num-eval-particles',
                        type    = int,
                        default = None,
                        help    = ('number of particles used for evaluation | '
                                   'default = None (same as train)'))

    args = parser.parse_args()

    with open(args.config, 'r', encoding='UTF-8') as handle:
        config = yaml.safe_load(handle)

    return config, args.device, args.gpu_id, args.num_eval_particles


def evaluate():
    """
    load config and evaluate a model
    """
    config, device, gpu_id, num_eval_particles = get_parameters()

    if device == 'cuda':
        torch.cuda.set_device(gpu_id)

    # checkpointing parameters
    checkpoint_path = config['checkpointing']['checkpoint_path']

    # training parameters
    batch_size = config['train']['batch_size']

    # set up checkpoint folder
    checkpoint_path = Path(checkpoint_path)

    # Create model and resume if needed
    model = MLP(**config['model'])

    # Checkpointer
    checkpointer = Checkpointer(model, checkpoint_path=checkpoint_path)
    checkpointer.load(device=device)

    # loss function
    loss_fn = torch.nn.MSELoss()

    # data loader
    data_root = get_data_root()

    if num_eval_particles is not None:
        num_particles = config['data']['num_particles']
    else:
        num_particles = num_eval_particles

    rounded_readout = config['data']['rounded']

    valid_ds  = ROMDataset(data_root, split='test', num_particles=num_particles)
    valid_ldr = DataLoader(valid_ds, batch_size=batch_size, shuffle=False)

    # evaluation
    with torch.no_grad():
        run_epoch(model,
                  rounded_readout,
                  loss_fn,
                  valid_ldr,
                  device = device)


if __name__ == '__main__':
    evaluate()
