"""
Train an detector calibration model on ROM data with IPOT
"""

import os
import argparse
from pathlib import Path
import yaml
from tqdm import tqdm
import pandas as pd

# == torch ======================================
import torch
from torch import nn
from torch.utils.data import DataLoader
from torch.optim import AdamW
from torch.optim.lr_scheduler import MultiStepLR

# == sparse poi =================================
from rtal.datasets.dataset import ROMDataset
from rtal.utils import (get_lr,
                        count_parameters,
                        get_data_root)
from rtal.utils import Checkpointer, Cumulator
from rtal.models.mlp_v2 import MLP
from rtal.geometry.line import (reconstruct,
                                calc_least_square_residual)


os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'


def run_epoch(model,
              rounded_readout,
              loss_fn,
              dataloader, *,
              device,
              optimizer = None,
              desc      = None):
    """
    run one epoch on a data loader
    """

    # whether to use binned or continous readout
    readout_type = 'rounded' if rounded_readout else 'cont'

    cumulator = Cumulator()

    pbar = tqdm(dataloader, total=len(dataloader), desc=desc)
    for event in pbar:

        # readout generated by the misaligned detectors
        readout = event[f'readout_curr_{readout_type}'].to(device)
        # Let us pretend for now that we know which three readouts are
        # generate from the same trajectory
        # readout: (batch_size, num_detectors, num_particles, 2)
        #        ->(batch_size, num_particles, num_detectors, 2)
        readout = torch.transpose(readout, 1, 2)

        # get the correct and misaligned detectors
        detector_curr = event['detector_curr'].to(device)
        detector_start = event['detector_start'].to(device)

        # let us predict misalignment
        misalignment = detector_curr - detector_start

        # if optimizer is provided, then we assembe the subset
        # with random permutation. In validation, we have to
        # turn off random permutation for possible FPGA deployment.
        is_train = optimizer is not None

        # run the model, calculate loss, and update network
        if is_train:
            misalignment_pred = model(readout.flatten(-2, -1))
        else:
            misalignment_pred = model.inference(readout.flatten(-2, -1), randperm=False)

        misalignment_pred = misalignment_pred.reshape(-1, 3, 9)

        diff = loss_fn(misalignment_pred, misalignment)

        # reconstruct the points and calculate the least square residual
        detector_pred = detector_start + misalignment_pred
        with torch.no_grad():
            residual = calc_least_square_residual(
                reconstruct(detector_pred, readout),
                particle_vertex    = event['particle_vertex'],
                particle_direction = event['particle_direction'],
                averaged           = True
            )

        # supervised loss
        loss = diff + 0 * residual

        if optimizer is not None:
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

        # metrics: line residual and differences to the
        # starting and current(target) detector parameters.
        with torch.no_grad():
            # get line residual
            residual_cc = calc_least_square_residual(
                reconstruct(detector_curr, readout),
                particle_vertex    = event['particle_vertex'],
                particle_direction = event['particle_direction'],
                averaged           = True
            )
            residual_sc = calc_least_square_residual(
                reconstruct(detector_start, readout),
                particle_vertex    = event['particle_vertex'],
                particle_direction = event['particle_direction'],
                averaged           = True
            )

            # get differences to the start and current (target) detector parameters.
            diff_to_start = loss_fn(detector_pred, detector_start)
            epsilon       = loss_fn(detector_curr, detector_start)

        # bookkeeping
        cumulator.update({'loss'    : loss.item(),
                          'res_pc'  : residual.item(),
                          'diff_pc' : diff.item(),
                          # metrics:
                          'diff_ps' : diff_to_start.item(),
                          'res_cc'  : residual_cc.item(),
                          'res_sc'  : residual_sc.item(),
                          'epsilon' : epsilon.item()})

        summary = cumulator.get_average()
        pbar.set_postfix(summary)

    return summary

def get_parameters():
    """
    Get training configuration and training device
    """
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('--config',
                        type    = str,
                        default = 'config.yaml',
                        help    = 'path to config file | config.yaml')
    parser.add_argument('--device',
                        type    = str,
                        default = 'cuda',
                        choices = ('cuda', 'cpu'),
                        help    = 'device to train the model on | default = cuda')
    parser.add_argument('--gpu-id',
                        type    = int,
                        default = 0,
                        help    = 'GPU to train the model on | default = 0')

    args = parser.parse_args()

    with open(args.config, 'r', encoding='UTF-8') as handle:
        config = yaml.safe_load(handle)

    return config, args.device, args.gpu_id


def train():
    """
    load config and train model
    """
    config, device, gpu_id = get_parameters()

    if device == 'cuda':
        torch.cuda.set_device(gpu_id)

    # checkpointing parameters
    checkpoint_path = config['checkpointing']['checkpoint_path']
    save_frequency  = config['checkpointing']['save_frequency']
    resume          = config['checkpointing']['resume']

    # training parameters
    num_epochs        = config['train']['num_epochs']
    num_warmup_epochs = config['train']['num_warmup_epochs']
    batch_size        = config['train']['batch_size']
    learning_rate     = config['train']['learning_rate']
    sched_steps       = config['train']['sched_steps']
    sched_gamma       = config['train']['sched_gamma']

    # set up checkpoint folder
    checkpoint_path = Path(checkpoint_path)
    if not checkpoint_path.exists():
        checkpoint_path.mkdir(parents=True)

    # Create model and resume if needed
    model = MLP(**config['model'])

    # optimizer
    optimizer = AdamW(model.parameters(), lr = learning_rate)

    # schedular
    milestones = range(num_warmup_epochs, num_epochs, sched_steps)
    scheduler = MultiStepLR(optimizer,
                            milestones = milestones,
                            gamma      = sched_gamma)

    # Calculate model size
    model_size = count_parameters(model) / (1024 ** 2)

    print(f'model size: {model_size:.4f}MB')
    with open(Path(checkpoint_path)/'model_size.dat', 'w', encoding='utf-8') as handle:
        handle.write(f'model_size_MB,{model_size:.2f}')

    # Checkpointer
    checkpointer = Checkpointer(model,
                                optimizer       = optimizer,
                                scheduler       = scheduler,
                                checkpoint_path = checkpoint_path,
                                save_frequency  = save_frequency)
    resume_epoch = 0
    if resume:
        resume_epoch = checkpointer.load(device=device)

    model = model.to(device)

    # loss function
    loss_fn = nn.MSELoss()

    # data loader
    data_root = get_data_root()

    num_particles   = config['data']['num_particles']
    rounded_readout = config['data']['rounded']

    train_ds  = ROMDataset(data_root, split='train', num_particles=num_particles)
    valid_ds  = ROMDataset(data_root, split='test',  num_particles=num_particles)
    train_ldr = DataLoader(train_ds, batch_size=batch_size, shuffle=True)
    valid_ldr = DataLoader(valid_ds, batch_size=batch_size, shuffle=False)

    # training
    train_log = Path(checkpoint_path)/'train_log.csv'
    valid_log = Path(checkpoint_path)/'valid_log.csv'
    for epoch in range(resume_epoch + 1, num_epochs + 1):

        current_lr = get_lr(optimizer)
        print(f'current learning rate = {current_lr:.10f}')

        # train
        desc = f'Train Epoch {epoch} / {num_epochs}'
        train_stat = run_epoch(model,
                               rounded_readout,
                               loss_fn,
                               train_ldr,
                               desc      = desc,
                               optimizer = optimizer,
                               device    = device)

        # validation
        with torch.no_grad():
            desc = f'Validation Epoch {epoch} / {num_epochs}'
            valid_stat = run_epoch(model,
                                   rounded_readout,
                                   loss_fn,
                                   valid_ldr,
                                   desc   = desc,
                                   device = device)

        # update learning rate
        scheduler.step()

        # save checkpoints
        checkpointer.save(epoch)

        # log the results
        for log, stat in zip([train_log, valid_log],
                             [train_stat, valid_stat]):

            stat.update({'lr': current_lr, 'epoch': epoch})
            df = pd.DataFrame(data=stat, index=[1])
            df.to_csv(log, index=False, float_format='%.6f',
                      mode   = 'a' if log.exists() else 'w',
                      header = not log.exists())


if __name__ == '__main__':
    train()
